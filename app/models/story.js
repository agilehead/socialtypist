// Generated by CoffeeScript 1.2.1-pre
(function() {
  var BaseModel, Story, async,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  async = require('async');

  BaseModel = require('./basemodel').BaseModel;

  Story = (function(_super) {

    __extends(Story, _super);

    Story.name = 'Story';

    function Story() {
      this.isOwner = __bind(this.isOwner, this);

      this.isAuthor = __bind(this.isAuthor, this);

      this.removeOwner = __bind(this.removeOwner, this);

      this.addOwner = __bind(this.addOwner, this);

      this.removeAuthor = __bind(this.removeAuthor, this);

      this.addAuthor = __bind(this.addAuthor, this);

      this.addChange = __bind(this.addChange, this);

      this.changePart = __bind(this.changePart, this);

      this.removePart = __bind(this.removePart, this);

      this.updatePart = __bind(this.updatePart, this);

      this.addPart = __bind(this.addPart, this);

      this.save = __bind(this.save, this);

      this.getParts = __bind(this.getParts, this);
      return Story.__super__.constructor.apply(this, arguments);
    }

    Story._meta = {
      type: Story,
      collection: 'stories',
      logging: {
        isLogged: true,
        onInsert: 'NEW_STORY'
      }
    };

    Story.getById = function(id, cb) {
      return Story._database.findOne('stories', {
        '_id': Story._database.ObjectId(id)
      }, function(err, result) {
        return cb(null, result ? new Story(result) : void 0);
      });
    };

    Story.prototype.getParts = function(cb) {
      var partid,
        _this = this;
      return Story._database.find('storyparts', {
        '$or': (function() {
          var _i, _len, _ref, _results;
          _ref = this.parts;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            partid = _ref[_i];
            _results.push({
              _id: Story._database.ObjectId(partid)
            });
          }
          return _results;
        }).call(this)
      }, function(err, parts) {
        return parts.toArray(function(err, items) {
          var item, part, partid, results, _i, _len, _ref;
          results = [];
          _ref = _this.parts;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            partid = _ref[_i];
            part = ((function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
                item = items[_j];
                if (item._id.toString() === partid) _results.push(item);
              }
              return _results;
            })())[0];
            part = new Story._models.StoryPart(part);
            results.push(part);
          }
          return cb(null, results);
        });
      });
    };

    Story.prototype.save = function(user, cb) {
      var _ref,
        _this = this;
      if (!((_ref = this.parts) != null ? _ref.length : void 0)) {
        this.createdBy = user;
        this.owners = [user];
        this.authors = [];
        this.parts = [];
        return Story.__super__.save.call(this, function() {
          return async.series([
            (function(cb) {
              var part;
              part = new Story._models.StoryPart();
              part.type = "HEADING";
              part.size = 'H2';
              part.value = "Sample Heading. Click to edit.";
              return _this.addPart(part, null, user, cb);
            }), (function(cb) {
              var part;
              part = new Story._models.StoryPart();
              part.type = "TEXT";
              part.value = "This is some sample content. Click to edit.";
              return _this.addPart(part, _this.parts[0], user, cb);
            })
          ], function() {
            return cb();
          });
        });
      } else {
        if (this.isOwner(user._id.toString())) {
          return Story.__super__.save.call(this, cb);
        } else {
          throw {
            type: 'NOT_OWNER',
            message: 'You do not own this story. Cannot modify.'
          };
        }
      }
    };

    Story.prototype.addPart = function(part, after, user, cb) {
      var _this = this;
      if (this.isAuthor(user._id.toString())) {
        part.author = user;
        part.story = this._id.toString();
        return part.save(function() {
          _this.parts.splice(_this.parts.indexOf(after) + 1, 0, part._id.toString());
          return _this.save(user, cb);
        });
      } else {
        throw {
          type: 'NOT_AUTHOR',
          message: 'You are not an author on this story. Cannot modify.'
        };
      }
    };

    Story.prototype.updatePart = function(part, user, cb) {
      if (this.isAuthor(user._id.toString())) {
        return part.save(cb);
      } else {
        throw {
          type: 'NOT_AUTHOR',
          message: 'You are not an author on this story. Cannot modify.'
        };
      }
    };

    Story.prototype.removePart = function(part, user, cb) {
      if (this.isAuthor(user._id.toString())) {
        this.parts.splice(this.parts.indexOf(part._id.toString(), 1));
        return this.save(cb);
      } else {
        throw {
          type: 'NOT_AUTHOR',
          message: 'You are not an author on this story. Cannot modify.'
        };
      }
    };

    Story.prototype.changePart = function(oldPart, newPart, user, cb) {
      if (this.isAuthor(user._id.toString())) {
        this.parts.splice(this.parts.indexOf(oldPart._id.toString(), 1, newPart._id.toString()));
        return this.save(cb);
      } else {
        throw {
          type: 'NOT_AUTHOR',
          message: 'You are not an author on this story. Cannot modify.'
        };
      }
    };

    Story.prototype.addChange = function(change, cb) {
      return change = 1;
    };

    Story.prototype.addAuthor = function(author, user, cb) {
      var existing, u;
      if (this.isOwner(user._id.toString())) {
        existing = (function() {
          var _i, _len, _ref, _results;
          _ref = this.authors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            u = _ref[_i];
            if (u._id.toString() === author._id.toString()) _results.push(u);
          }
          return _results;
        }).call(this);
        if (!existing.length) {
          this.authors.push(author);
          return this.save(cb);
        }
      } else {
        throw {
          type: 'NOT_OWNER',
          message: 'You do not own this story. Cannot modify.'
        };
      }
    };

    Story.prototype.removeAuthor = function(authorId, user, cb) {
      var existing, u;
      if (this.isOwner(user._id.toString())) {
        existing = (function() {
          var _i, _len, _ref, _results;
          _ref = this.authors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            u = _ref[_i];
            if (u._id.toString() === authorId) _results.push(u);
          }
          return _results;
        }).call(this);
        if (exiting.length) {
          this.authors = (function() {
            var _i, _len, _ref, _results;
            _ref = this.authors;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              u = _ref[_i];
              if (u._id.toString() !== authorId) _results.push(u);
            }
            return _results;
          }).call(this);
          return this.save(cb);
        }
      } else {
        throw {
          type: 'NOT_OWNER',
          message: 'You do not own this story. Cannot modify.'
        };
      }
    };

    Story.prototype.addOwner = function(owner, user, cb) {
      var existing, u;
      if (this.isOwner(user._id.toString())) {
        existing = (function() {
          var _i, _len, _ref, _results;
          _ref = this.owners;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            u = _ref[_i];
            if (u._id.toString() === owner._id.toString()) _results.push(u);
          }
          return _results;
        }).call(this);
        if (!existing.length) {
          this.owners.push(owner);
          return this.save(cb);
        }
      } else {
        throw {
          type: 'NOT_OWNER',
          message: 'You do not own this story. Cannot modify.'
        };
      }
    };

    Story.prototype.removeOwner = function(ownerId, user, cb) {
      var existing, u;
      if (this.isOwner(user._id.toString())) {
        existing = (function() {
          var _i, _len, _ref, _results;
          _ref = this.owners;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            u = _ref[_i];
            if (u._id.toString() === ownerId) _results.push(u);
          }
          return _results;
        }).call(this);
        if (exiting.length) {
          this.owners = (function() {
            var _i, _len, _ref, _results;
            _ref = this.owners;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              u = _ref[_i];
              if (u._id.toString() !== ownerId) _results.push(u);
            }
            return _results;
          }).call(this);
          return this.save(cb);
        }
      } else {
        throw {
          type: 'NOT_OWNER',
          message: 'You do not own this story. Cannot modify.'
        };
      }
    };

    Story.prototype.isAuthor = function(userId) {
      var authors, owners, u;
      authors = (function() {
        var _i, _len, _ref, _results;
        _ref = this.authors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          u = _ref[_i];
          if (u._id.toString() === userId) _results.push(u);
        }
        return _results;
      }).call(this);
      owners = (function() {
        var _i, _len, _ref, _results;
        _ref = this.owners;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          u = _ref[_i];
          if (u._id.toString() === userId) _results.push(u);
        }
        return _results;
      }).call(this);
      return authors.length > 0 || owners.length > 0;
    };

    Story.prototype.isOwner = function(userId) {
      var matches, u;
      matches = (function() {
        var _i, _len, _ref, _results;
        _ref = this.owners;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          u = _ref[_i];
          if (u._id.toString() === userId) _results.push(u);
        }
        return _results;
      }).call(this);
      return matches.length > 0;
    };

    return Story;

  }).call(this, BaseModel);

  exports.Story = Story;

}).call(this);
