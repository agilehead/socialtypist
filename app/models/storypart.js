// Generated by CoffeeScript 1.3.1
(function() {
  var BaseModel, StoryPart, markdown, sanitize,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BaseModel = require('./basemodel').BaseModel;

  markdown = require("node-markdown").Markdown;

  sanitize = require("../common/mdsanitizer").sanitize;

  StoryPart = (function(_super) {

    __extends(StoryPart, _super);

    StoryPart.name = 'StoryPart';

    function StoryPart() {
      this.toHtml = __bind(this.toHtml, this);

      this.save = __bind(this.save, this);

      this.getHtml = __bind(this.getHtml, this);
      return StoryPart.__super__.constructor.apply(this, arguments);
    }

    StoryPart._meta = {
      type: StoryPart,
      collection: 'storyparts'
    };

    StoryPart.prototype.getHtml = function() {
      var r, res, videoId;
      if (this.type === "TEXT") {
        return this.toHtml(this.value);
      } else if (this.type === "HEADING") {
        if (this.size === "H1") {
          return this.toHtml("# " + this.value);
        } else if (this.size === "H2") {
          return this.toHtml("## " + this.value);
        } else if (this.size === "H3") {
          return this.toHtml("### " + this.value);
        } else if (this.size === "H4") {
          return this.toHtml("#### " + this.value);
        } else if (this.size === "H5") {
          return this.toHtml("##### " + this.value);
        } else if (this.size === "H6") {
          return this.toHtml("###### " + this.value);
        }
      } else if (this.type === "IMAGE") {
        return "<p class=\"media\"><img src=\"" + this.value + "\" alt=\"\" /></p>";
      } else if (this.type === "VIDEO") {
        r = /https?:\/\/www\.youtube\.com\/watch\?v\=(\w+)/;
        res = this.value.match(r);
        if (res) {
          videoId = res[1];
          return "<p class=\"media\"><iframe width=\"480\" height=\"360\" src=\"https://www.youtube.com/embed/" + videoId + "\" frameborder=\"0\" allowfullscreen></iframe></p>";
        }
      }
    };

    StoryPart.prototype.save = function(cb) {
      var allowedAttributes, allowedTags;
      allowedTags = 'a|b|blockquote|code|del|dd|dl|dt|em|h1|h2|h3|h4|h5|h6|i|img|li|ol|p|pre|sup|sub|strong|strike|ul|br|hr';
      allowedAttributes = {
        'img': 'src|width|height|alt',
        'a': 'href',
        '*': 'title'
      };
      this.value = sanitize(this.value, allowedTags, allowedAttributes);
      this.html = this.getHtml();
      return StoryPart.__super__.save.call(this, cb);
    };

    StoryPart.prototype.toHtml = function(input) {
      var allowedAttributes, allowedTags;
      allowedTags = 'a|b|blockquote|code|del|dd|dl|dt|em|h1|h2|h3|h4|h5|h6|i|img|li|ol|p|pre|sup|sub|strong|strike|ul|br|hr';
      allowedAttributes = {
        'img': 'src|width|height|alt',
        'a': 'href',
        '*': 'title'
      };
      return markdown(input, true, allowedTags, allowedAttributes);
    };

    return StoryPart;

  })(BaseModel);

  exports.StoryPart = StoryPart;

}).call(this);
