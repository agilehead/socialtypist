// Generated by CoffeeScript 1.2.1-pre
(function() {
  var BaseModel, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  utils = require('../common/utils');

  BaseModel = (function() {

    BaseModel.name = 'BaseModel';

    function BaseModel(params) {
      this.save = __bind(this.save, this);

      var meta;
      utils.extend(this, params);
      meta = this.constructor._meta;
      if (this._id) this._id = meta.type._database.ObjectId(this._id);
    }

    BaseModel.get = function(params, cb) {
      var meta,
        _this = this;
      meta = this._meta;
      return this._database.findOne(meta.collection, params, function(err, result) {
        return cb(err, result ? new meta.type(result) : void 0);
      });
    };

    BaseModel.getById = function(id, cb) {
      var meta,
        _this = this;
      meta = this._meta;
      return this._database.findOne(meta.collection, {
        '_id': this._database.ObjectId(id)
      }, function(err, result) {
        return cb(err, result ? new meta.type() : void 0);
      });
    };

    BaseModel.prototype.save = function(cb) {
      var event, meta, _ref,
        _this = this;
      if (this._objects != null) delete this._objects;
      meta = this.constructor._meta;
      if (!(this._id != null)) {
        if ((_ref = meta.logging) != null ? _ref.isLogged : void 0) {
          event = {};
          event.type = meta.logging.onInsert;
          event.data = this;
          meta.type._database.insert('events', event, function() {});
        }
        return meta.type._database.insert(meta.collection, this, function(err, r) {
          if (cb != null) return cb(err, r);
        });
      } else {
        return meta.type._database.update(meta.collection, this, function(err, r) {
          if (cb != null) return cb(err, r);
        });
      }
    };

    return BaseModel;

  })();

  exports.BaseModel = BaseModel;

}).call(this);
