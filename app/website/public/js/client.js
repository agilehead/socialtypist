// Generated by CoffeeScript 1.2.1-pre
(function() {
  var Client, DEBUG,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DEBUG = true;

  Client = (function() {

    Client.name = 'Client';

    function Client() {
      this.fbLogoutLink = __bind(this.fbLogoutLink, this);

      this.fbLoginLink = __bind(this.fbLoginLink, this);
      this.setLoginStatus();
    }

    Client.prototype.initFB = function(FB) {
      this.FB = FB;
    };

    Client.prototype.makeRestrictedLink = function(url, selector) {
      var _this = this;
      return $(selector).click(function() {
        var callback;
        if (!loggedIn) {
          if (DEBUG && /http(s?):\/\/local\./.test(window.location.href)) {
            callback = function(response) {
              var _this = this;
              if (response.authResponse) {
                return this.FB.api('/me', function(userDetails) {
                  return $.post('/addSession_INSECURE', {
                    domain: 'facebook',
                    response: response,
                    userDetails: userDetails
                  }, function() {
                    return window.location.reload();
                  });
                });
              }
            };
            _this.FB.login(callback, {
              scope: 'email,user_location'
            });
            return false;
          } else {
            callback = function(response) {
              var _this = this;
              if (response.authResponse) {
                return $.post('/addSession', {
                  domain: 'facebook',
                  response: response
                }, function() {
                  return window.location.reload();
                });
              }
            };
            _this.FB.login(callback, {
              scope: 'email,user_location'
            });
            return false;
          }
        } else {
          return window.location.href = url;
        }
      });
    };

    Client.prototype.setLoginStatus = function() {
      if (loggedIn) {
        if (authProvider === 'facebook') {
          return $('.login .logoutLink').click(this.fbLogoutLink);
        }
      } else {
        return $('.login .fbLoginLink').click(this.fbLoginLink);
      }
    };

    Client.prototype.fbLoginLink = function() {
      var callback;
      if (DEBUG && /http(s?):\/\/local\./.test(window.location.href)) {
        console.log('Adding an insecure session.');
        callback = function(response) {
          var _this = this;
          if (response.authResponse) {
            return this.FB.api('/me', function(userDetails) {
              return $.post('/addSession_INSECURE', {
                domain: 'facebook',
                response: response,
                userDetails: userDetails
              }, function() {
                return window.location.reload();
              });
            });
          }
        };
        this.FB.login(callback, {
          scope: 'email,user_location'
        });
        return false;
      } else {
        callback = function(response) {
          var _this = this;
          if (response.authResponse) {
            return $.post('/addSession', {
              domain: 'facebook',
              response: response
            }, function() {
              return window.location.reload();
            });
          }
        };
        this.FB.login(callback, {
          scope: 'email,user_location'
        });
        return false;
      }
    };

    Client.prototype.fbLogoutLink = function() {
      var _this = this;
      return $.get('/removeSession', function() {
        return window.location.reload();
      });
      /*
              @FB.getLoginStatus (response) =>
                  if response.status == 'connected'
                      $.get '/removeSession', () =>
                          @FB.logout () =>
                              window.location.href = "/"
                  else
                      $.get '/removeSession', () =>
                          window.location.href = "/"
                  return false
      */

    };

    return Client;

  })();

  this.SocialTypist.Client = Client;

}).call(this);
