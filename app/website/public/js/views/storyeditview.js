// Generated by CoffeeScript 1.2.1-pre
(function() {
  var ContentPane, MessagePane, SettingsPane, StoryEditView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  StoryEditView = (function() {

    StoryEditView.name = 'StoryEditView';

    function StoryEditView(story, editor) {
      this.story = story;
      this.editor = editor;
      this.setupLiveUpdate = __bind(this.setupLiveUpdate, this);

      this.populateAuthors = __bind(this.populateAuthors, this);

      this.renderRightPane = __bind(this.renderRightPane, this);

      this.setupNav = __bind(this.setupNav, this);

      this.setupNav();
      this.setActiveTab('content');
      this.renderRightPane();
    }

    StoryEditView.prototype.setupNav = function() {
      var _this = this;
      this.editor.find('.nav-settings a').click(function() {
        return _this.setActiveTab('settings');
      });
      this.editor.find('.nav-content a').click(function() {
        return _this.setActiveTab('content');
      });
      this.editor.find('.nav-messages a').click(function() {
        return _this.setActiveTab('messages');
      });
      return this.editor.find('.nav-history a').click(function() {
        return _this.setActiveTab('history');
      });
    };

    StoryEditView.prototype.setActiveTab = function(tab) {
      this.editor.find('.tab-content').html('');
      this.editor.find('.nav-pills li').removeClass('active');
      switch (tab) {
        case 'settings':
          this.editor.find('.nav-pills li.nav-settings').addClass('active');
          return new SettingsPane(this.story, this.editor, this);
        case 'content':
          this.editor.find('.nav-pills li.nav-content').addClass('active');
          return new ContentPane(this.story, this.editor, this);
        case 'messages':
          this.editor.find('.nav-pills li.nav-messages').addClass('active');
          return new MessagePane(this.story, this.editor, this);
        case 'history':
          this.editor.find('.nav-pills li.nav-history').addClass('active');
          return new HistoryPane(this.story, this.editor, this);
      }
    };

    StoryEditView.prototype.renderRightPane = function() {
      this.populateAuthors();
      return this.setupLiveUpdate();
    };

    StoryEditView.prototype.populateAuthors = function() {
      var author, authors, authorsContainer, authorsElem, _i, _len, _results;
      authorsContainer = this.editor.find('.rpane .authors');
      authorsContainer.html('\
            <h3>Authors</h3>\
            <ul class="iconic-summary"></ul>');
      authorsElem = authorsContainer.find('ul');
      authors = this.story.cache.owners.concat(this.story.cache.authors);
      _results = [];
      for (_i = 0, _len = authors.length; _i < _len; _i++) {
        author = authors[_i];
        _results.push(authorsElem.append("                <li>                    <div class=\"icon\">                        <img src=\"http://graph.facebook.com/" + author.domainid + "/picture?type=square\" />                    </div>                    <div class=\"summary\">                        <h3>" + author.name + "</h3>                        <p>Owner</p>                    </div>                </li>"));
      }
      return _results;
    };

    StoryEditView.prototype.setupLiveUpdate = function() {};

    return StoryEditView;

  })();

  MessagePane = (function() {

    MessagePane.name = 'MessagePane';

    function MessagePane(story, editor, view) {
      this.story = story;
      this.editor = editor;
      this.view = view;
      this.loadMessages = __bind(this.loadMessages, this);

      this.addMessage = __bind(this.addMessage, this);

      this.cancelAddMessage = __bind(this.cancelAddMessage, this);

      this.showAddMessage = __bind(this.showAddMessage, this);

      this.editor.find('.tab-content').html('<div class="message-pane"></div>');
      this.container = this.editor.find('.message-pane');
      this.container.html('\
            <p class="show-send-message">\
                <a href="#" class="btn">New message</a> <span class="padded help-inline">Message goes to all authors.</span>\
            </p>\
            <div class="add-message" style="display:none">\
                <form class="well">\
                    <p>\
                        <textarea rows="6" style="width:90%"></textarea>\
                        <br />\
                        <a class="btn btn-small send" href="#">Send Message</a> <a href="#" class="cancel">cancel</a>\
                    </p>\
                </form>\
            </div>\
            <div class="message-list">\
            </div>');
      this.container.find('.show-send-message a.btn').click(this.showAddMessage);
      this.container.find('.add-message .btn.send').click(this.addMessage);
      this.container.find('.add-message .cancel').click(this.cancelAddMessage);
      this.loadMessages();
    }

    MessagePane.prototype.showAddMessage = function() {
      this.container.find('.show-send-message').hide();
      this.container.find('.add-message textarea').val('');
      return this.container.find('.add-message').show();
    };

    MessagePane.prototype.cancelAddMessage = function() {
      this.container.find('.add-message').hide();
      return this.container.find('.show-send-message').show();
    };

    MessagePane.prototype.addMessage = function() {
      var _this = this;
      return $.post("/stories/" + this.story._id + "/messages", {
        message: this.container.find('.add-message textarea').val()
      }, function(err, response) {
        if (response.success) {
          _this.container.find('.add-message').hide();
          return _this.container.find('.show-send-message').show();
        }
      });
    };

    MessagePane.prototype.loadMessages = function() {
      var _this = this;
      return $.get("/stories/" + this.story._id + "/messages", function(response) {
        var message, messageListElem, _i, _len, _ref, _results;
        _this.container.find('.message-list').html('<ul class="iconic-summary"></ul>');
        messageListElem = _this.container.find('.message-list ul');
        _ref = response.messages;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          message = _ref[_i];
          try {
            if (message.type === 'AUTHOR_ACCESS_REQUEST') {
              _results.push(messageListElem.append("                            <li>                                <div class=\"icon\">                                    <img src=\"http://graph.facebook.com/" + message.cache.from.domainid + "/picture?type=square\" />                                </div>                                <div class=\"summary\">                                    <h2>" + message.cache.from.name + "</h2>                                    <div class=\"text\">                                        " + message.content + "                                    </div>                                </div>                            <li>"));
            } else {
              _results.push(messageListElem.append("                            <li>                                <div class=\"icon\">                                    <img src=\"http://graph.facebook.com/" + message.cache.from.domainid + "/picture?type=square\" />                                </div>                                <div class=\"summary\">                                    <h2>" + message.cache.from.name + "</h2>                                    <div class=\"text\">                                        " + message.content + "                                    </div>                                </div>                            <li>"));
            }
          } catch (err) {

          }
        }
        return _results;
      });
    };

    return MessagePane;

  })();

  SettingsPane = (function() {

    SettingsPane.name = 'SettingsPane';

    function SettingsPane(story, editor, view) {
      var actionElem, all, authors, authorsElem, date, i, month, owners, prefix, slug, today, u, user, year, _i, _len;
      this.story = story;
      this.editor = editor;
      this.view = view;
      this.editor.find('.tab-content').html('<div class="settings-pane"></div>');
      this.container = this.editor.find('.settings-pane');
      slug = this.story.title.toLowerCase().replace(/[^\w ]+/g, '').replace(/\ +/g, '-');
      prefix = this.story.publishedDate;
      if (!prefix) {
        today = new Date();
        year = today.getYear() + 1900;
        month = today.getMonth();
        month = month < 10 ? '0' + month : month;
        date = today.getDate();
        date = date < 10 ? '0' + date : date;
        prefix = year + month + date + '';
      }
      this.container.html("            <form>                <p>                    <label>Tags</label>                    <input type=\"text\" value=\"" + this.story.tags + "\" class=\"span6\" />                </p>                <p>                    <label>Publish Url</label>                    <span class=\"light\">/" + prefix + "/</span><input type=\"text\" value=\"" + slug + "\" class=\"span6\" /><br />                </p>                <p>                    <a class=\"btn save\" href=\"#\">Save Settings</a>                </p>            </form>");
      owners = (function() {
        var _i, _len, _ref, _results;
        _ref = this.story.cache.owners;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          _results.push({
            type: 'owner',
            user: user
          });
        }
        return _results;
      }).call(this);
      authors = (function() {
        var _i, _len, _ref, _results;
        _ref = this.story.cache.authors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          _results.push({
            type: 'author',
            user: user
          });
        }
        return _results;
      }).call(this);
      all = (function() {
        var _i, _len, _ref, _results;
        _ref = owners.concat(authors);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          u = _ref[_i];
          if (u.user._id === this.story.createdBy) _results.push(u);
        }
        return _results;
      }).call(this);
      if (all.length) {
        this.container.append("                <h3>Authors</h3>                <ul class=\"authors iconic-summary\">                </ul>");
        authorsElem = this.container.find('.authors');
        for (_i = 0, _len = all.length; _i < _len; _i++) {
          i = all[_i];
          authorsElem.append("                    <li>                        <div class=\"icon\">                            <img src=\"http://graph.facebook.com/" + i.user.domainid + "/picture?type=square\" />                        </div>                        <div class=\"summary\">                            <h3>" + i.user.name + "</h3>                            <p class=\"author-actions\"></p>                        </div>                    </li>");
          actionElem = authorsElem.find('li p.author-actions').last();
          if (i.user._id !== this.story.createdBy) {
            if (i.type === 'owner') {
              actionElem.html('<a href="#" class="remove">remove</a>');
            }
          } else {
            actionElem.html('owner');
          }
        }
      }
    }

    return SettingsPane;

  })();

  ContentPane = (function() {

    ContentPane.name = 'ContentPane';

    function ContentPane(story, editor, view) {
      var _this = this;
      this.story = story;
      this.editor = editor;
      this.view = view;
      this.getHeadingPrefix = __bind(this.getHeadingPrefix, this);

      this.createForm = __bind(this.createForm, this);

      this.makeHtml = __bind(this.makeHtml, this);

      this.addSection = __bind(this.addSection, this);

      this.removePart = __bind(this.removePart, this);

      this.cancelPartEdit = __bind(this.cancelPartEdit, this);

      this.savePart = __bind(this.savePart, this);

      this.editVideoPart = __bind(this.editVideoPart, this);

      this.editImagePart = __bind(this.editImagePart, this);

      this.editTextPart = __bind(this.editTextPart, this);

      this.editHeadingPart = __bind(this.editHeadingPart, this);

      this.editPart = __bind(this.editPart, this);

      this.renderVideoPart = __bind(this.renderVideoPart, this);

      this.renderImagePart = __bind(this.renderImagePart, this);

      this.renderTextPart = __bind(this.renderTextPart, this);

      this.renderHeadingPart = __bind(this.renderHeadingPart, this);

      this.renderPartContent = __bind(this.renderPartContent, this);

      this.createPartContainer = __bind(this.createPartContainer, this);

      this.createParts = __bind(this.createParts, this);

      this.cancelTitleEdit = __bind(this.cancelTitleEdit, this);

      this.saveTitle = __bind(this.saveTitle, this);

      this.editTitle = __bind(this.editTitle, this);

      this.createTitle = __bind(this.createTitle, this);

      this.editor.find('.tab-content').html('<div class="story"></div>');
      this.container = $(this.editor.find('.story'));
      this.showdown = new Showdown.converter();
      this.editor.find('.publish-button').click(function() {
        return $.post("/stories/" + _this.story._id + "/publish", function() {
          return window.location.href = "/stories/" + _this.story._id;
        });
      });
      this.createTitle();
      this.createParts();
    }

    ContentPane.prototype.createTitle = function() {
      var title,
        _this = this;
      this.container.append("<div class=\"editable title\"><h1>" + this.story.title + "</h1></div>");
      title = this.container.find('.editable.title');
      title.data('title', this.story.title);
      return title.click(function() {
        return _this.editTitle();
      });
    };

    ContentPane.prototype.editTitle = function() {
      var editable, val,
        _this = this;
      editable = $('#story-editor .editable.title');
      editable.unbind('click');
      editable.addClass('selected');
      val = editable.data('title');
      editable.html("            <form class=\"title-editor\">                <input type=\"text\" class=\"span6\" /><br />                <p class=\"left\">                    <a class=\"save btn small action\" href=\"#\"><i class=\"icon-ok\"></i>Save section</a> <i class=\"icon-remove\"></i><a class=\"cancel small action\" href=\"#\">cancel</a>                </p>                <hr />                <p class=\"add-section\"><i class=\"icon-arrow-down\"></i><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
      editable.find('.title-editor input').val(val);
      editable.find('a.save').click(function() {
        _this.saveTitle();
        return false;
      });
      editable.find('a.cancel').click(function() {
        _this.cancelTitleEdit();
        return false;
      });
      editable.find('.insert').click(function() {
        _this.addSection('start');
        return false;
      });
      return editable.find('input').keypress(function(e) {
        if (e.which === 13) {
          _this.saveTitle();
          return false;
        }
      });
    };

    ContentPane.prototype.saveTitle = function() {
      var editable, val,
        _this = this;
      editable = $('#story-editor .editable.title');
      val = $('.title-editor input').val();
      return $.put("/stories/" + story._id, {
        title: val
      }, function(response) {
        if (response.success) {
          editable.click(function() {
            return _this.editTitle();
          });
          editable.removeClass('selected');
          editable.html("<h1 class=\"title\">" + val + "</h1>");
          return editable.data('title', val);
        }
      });
    };

    ContentPane.prototype.cancelTitleEdit = function() {
      var editable,
        _this = this;
      editable = $('#story-editor .editable.title');
      editable.click(function() {
        return _this.editTitle();
      });
      editable.removeClass('selected');
      return editable.html("<h1 class=\"title\">" + (editable.data('title')) + "</h1>");
    };

    ContentPane.prototype.createParts = function() {
      var editable, part, _i, _len, _ref, _results,
        _this = this;
      this.container.append('<ul id="part-editor" class="story"></ul>');
      this.container.append('<p class=\"add-section\"><i class=\"icon-arrow-down\"></i><a class=\"small action insert\" href=\"#\">add new section</a></p>');
      this.container.find('.add-section a').click(function() {
        _this.addSection('end');
        return false;
      });
      this.editor = this.container.find('#part-editor').first();
      if (this.story._objects.parts.length) {
        _ref = this.story._objects.parts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          editable = this.createPartContainer(part, editable);
          editable.data('part', part);
          _results.push(this.renderPartContent(editable));
        }
        return _results;
      }
    };

    ContentPane.prototype.createPartContainer = function(part, previousElement) {
      var editable;
      editable = this.editor.find("#storypart_" + part._id);
      if (!editable.length) {
        if (!previousElement || !previousElement.length) {
          this.editor.prepend("<li class=\"content editable\" id=\"storypart_" + part._id + "\"><br /></li>");
        } else {
          $("<li class=\"content editable\" id=\"storypart_" + part._id + "\"></li>").insertAfter(previousElement);
        }
        editable = this.editor.find("#storypart_" + part._id);
      }
      return editable;
    };

    ContentPane.prototype.renderPartContent = function(editable) {
      var _this = this;
      editable.click(function() {
        return _this.editPart(editable);
      });
      switch (editable.data('part').type) {
        case 'HEADING':
          this.renderHeadingPart(editable);
          break;
        case 'TEXT':
          this.renderTextPart(editable);
          break;
        case 'IMAGE':
          this.renderImagePart(editable);
          break;
        case 'VIDEO':
          this.renderVideoPart(editable);
      }
      return editable;
    };

    ContentPane.prototype.renderHeadingPart = function(editable) {
      var part;
      part = editable.data('part');
      return editable.html(this.makeHtml(this.getHeadingPrefix(part.size) + part.value));
    };

    ContentPane.prototype.renderTextPart = function(editable) {
      var part;
      part = editable.data('part');
      return editable.html(this.makeHtml(part.value));
    };

    ContentPane.prototype.renderImagePart = function(editable) {
      var alt, part, _ref;
      part = editable.data('part');
      alt = (_ref = part.alt) != null ? _ref : '';
      return editable.html("<p class=\"image-container\"><img src=\"" + part.value + "\" alt=\"" + alt + "\" /></p>");
    };

    ContentPane.prototype.renderVideoPart = function(editable) {
      var embed, part, r, res, videoId;
      part = editable.data('part');
      r = /https?:\/\/www\.youtube\.com\/watch\?v\=(\w+)/;
      res = part.value.match(r);
      if (res) {
        videoId = res[1];
        embed = "<p class=\"media\"><iframe width=\"480\" height=\"360\" src=\"https://www.youtube.com/embed/" + videoId + "\" frameborder=\"0\" allowfullscreen></iframe></p>";
        return editable.html(embed);
      }
    };

    ContentPane.prototype.editPart = function(editable) {
      var part,
        _this = this;
      part = editable.data('part');
      editable.unbind('click');
      editable.addClass('selected');
      switch (part.type) {
        case 'HEADING':
          this.editHeadingPart(editable);
          break;
        case 'TEXT':
          this.editTextPart(editable);
          break;
        case 'IMAGE':
          this.editImagePart(editable);
          break;
        case 'VIDEO':
          this.editVideoPart(editable);
      }
      editable.find('.cancel').click(function() {
        _this.cancelPartEdit(editable);
        return false;
      });
      editable.find('.delete').click(function() {
        _this.removePart(editable);
        return false;
      });
      editable.find('.insert').click(function() {
        _this.addSection(editable);
        return false;
      });
      return editable.find('textarea').focus();
    };

    ContentPane.prototype.editHeadingPart = function(editable) {
      var fnAfterSave, fnUpdatePart, part, save, _ref, _ref1,
        _this = this;
      part = editable.data('part');
      this.createForm(editable, "            <form>                <select class=\"size span2\">                    <option value=\"H2\">H2</option>                    <option value=\"H3\">H3</option>                    <option value=\"H4\">H4</option>                </select>                <br />                <input type=\"text\" class=\"span6\" value=\"" + ((_ref = part.value) != null ? _ref : '') + "\" />                <p class=\"left\">                    <a class=\"save btn small action\" href=\"#\"><i class=\"icon-ok\"></i>Save section</a> <i class=\"icon-remove\"></i><a class=\"cancel small action\" href=\"#\">cancel</a>                    <i class=\"icon-trash\"></i><a class=\"delete action small unsafe\" href=\"#\">delete?</a>                </p>                <hr />                <p class=\"add-section\"><i class=\"icon-arrow-down\"></i><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
      editable.find('select').focus();
      editable.find('.size').val((_ref1 = part.size) != null ? _ref1 : 'H2');
      fnUpdatePart = function() {
        part.size = editable.find('select').val();
        return part.value = editable.find('input').val();
      };
      fnAfterSave = function() {
        return editable.html(_this.makeHtml(_this.getHeadingPrefix(part.size) + part.value));
      };
      save = function() {
        return _this.savePart(editable, fnUpdatePart, fnAfterSave);
      };
      editable.find('.save').click(save);
      return editable.find('input').keypress(function(e) {
        if (e.which === 13) return save();
      });
    };

    ContentPane.prototype.editTextPart = function(editable) {
      var fnAfterSave, fnUpdatePart, part, rows, _ref,
        _this = this;
      part = editable.data('part');
      if (editable.height() > 480) {
        rows = 28;
      } else if (editable.height() > 240) {
        rows = 16;
      } else {
        rows = 8;
      }
      this.createForm(editable, "            <form>                <textarea rows=\"" + rows + "\">" + ((_ref = part.value) != null ? _ref : '') + "</textarea>                <p class=\"left\">                    <a class=\"save btn small action\" href=\"#\"><i class=\"icon-ok\"></i>Save section</a> <i class=\"icon-remove\"></i><a class=\"cancel small action\" href=\"#\">cancel</a>                    <i class=\"icon-trash\"></i><a class=\"delete action small unsafe\" href=\"#\">delete?</a>                </p>                <hr />                <p class=\"add-section\"><i class=\"icon-arrow-down\"></i><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
      fnUpdatePart = function() {
        return part.value = editable.find('textarea').val();
      };
      fnAfterSave = function() {
        return editable.html(_this.makeHtml(part.value));
      };
      return editable.find('.save').click(function() {
        return _this.savePart(editable, fnUpdatePart, fnAfterSave);
      });
    };

    ContentPane.prototype.editImagePart = function(editable) {
      var fnAfterSave, fnUpdatePart, part, _ref,
        _this = this;
      part = editable.data('part');
      this.createForm(editable, "            <div class=\"with-url\">                <form>                    Image url: <input type=\"text\" class=\"url span5\" value=\"" + ((_ref = part.value) != null ? _ref : '') + "\" /> or <a href=\"#\" class=\"upload\">Upload file</a>                    <p class=\"left\">                        <a class=\"save btn small action\" href=\"#\"><i class=\"icon-ok\"></i>Save section</a> <i class=\"icon-remove\"></i><a class=\"cancel small action\" href=\"#\">cancel</a>                        <i class=\"icon-trash\"></i><a class=\"delete action small unsafe\" href=\"#\">delete?</a>                    </p>                    <hr />                    <p class=\"add-section\"><i class=\"icon-arrow-down\"></i><a class=\"small action insert\" href=\"#\">insert section below</a></p>                </form>            </div>            <div class=\"with-upload\" style=\"display:none\">                <form class=\"upload-form\" name=\"form\" action=\"upload\" method=\"POST\" target=\"upload-frame\" enctype=\"multipart/form-data\" >                    <input type=\"file\" name=\"file\" /><br />                    <a href=\"#\" class=\"btn upload\">Upload</a> <a class=\"cancel small action\" href=\"#\">cancel</a>                    <iframe id=\"upload-frame\" name=\"upload-frame\" src=\"\" style=\"display:none;height:0;width:0\"></iframe>                </form>            </div>");
      editable.find('.with-url .upload').click(function() {
        editable.find('.with-url').hide();
        editable.find('.with-upload').show();
        return editable.find('.with-upload .upload').click(function() {
          var frame;
          frame = editable.find('#upload-frame');
          frame.unbind('load');
          frame.load(function() {
            var url;
            url = $(frame[0].contentWindow.document).text();
            editable.find('input.url').val(url);
            return _this.savePart(editable, fnUpdatePart, fnAfterSave);
          });
          return editable.find('.upload-form').submit();
        });
      });
      fnUpdatePart = function() {
        var src;
        src = editable.find('input.url').val();
        return part.value = src;
      };
      fnAfterSave = function() {
        return editable.html(_this.makeHtml("<p class=\"media\"><img src=\"" + part.value + "\" alt=\"\" /></p>"));
      };
      return editable.find('.save').click(function() {
        return _this.savePart(editable, fnUpdatePart, fnAfterSave);
      });
    };

    ContentPane.prototype.editVideoPart = function(editable) {
      var fnAfterSave, fnUpdatePart, part, _ref,
        _this = this;
      part = editable.data('part');
      this.createForm(editable, "            <form>                YouTube url: <input type=\"text\" class=\"span5\" value=\"" + ((_ref = part.value) != null ? _ref : '') + "\" />                <p class=\"left\">                    <a class=\"save btn small action\" href=\"#\"><i class=\"icon-ok\"></i>Save section</a> <i class=\"icon-remove\"></i><a class=\"cancel small action\" href=\"#\">cancel</a>                    <i class=\"icon-trash\"></i><a class=\"delete action small unsafe\" href=\"#\">delete?</a>                </p>                <hr />                <p class=\"add-section\"><i class=\"icon-arrow-down\"></i><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
      fnUpdatePart = function() {
        var url;
        url = editable.find('input').val();
        part.source = "youtube";
        return part.value = url;
      };
      fnAfterSave = function() {
        var embed, r, res, videoId;
        r = /https?:\/\/www\.youtube\.com\/watch\?v\=(\w+)/;
        res = part.value.match(r);
        if (res) {
          videoId = res[1];
          embed = "<p class=\"media\"><iframe width=\"480\" height=\"360\" src=\"https://www.youtube.com/embed/" + videoId + "\" frameborder=\"0\" allowfullscreen></iframe></p>";
          return editable.html(embed);
        }
      };
      return editable.find('.save').click(function() {
        return _this.savePart(editable, fnUpdatePart, fnAfterSave);
      });
    };

    ContentPane.prototype.savePart = function(editable, fnUpdatePart, fnAfterSave) {
      var element, onComplete, part, postData,
        _this = this;
      fnUpdatePart();
      part = editable.data('part');
      postData = {};
      SocialTypist.Utils.extend(postData, part);
      onComplete = function(response) {
        if (response.success) {
          editable.click(function() {
            return _this.editPart(editable);
          });
          editable.removeClass('selected');
          return fnAfterSave();
        }
      };
      if (!part.isNew) {
        $.put("/stories/" + this.story._id + "/parts/" + part._id, postData, onComplete);
      } else {
        delete postData._id;
        delete postData.isNew;
        postData.previousParts = (function() {
          var _i, _len, _ref, _results;
          _ref = editable.prevAll();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            element = _ref[_i];
            if (!$(element).data('part').isNew) {
              _results.push($(element).data('part')._id);
            }
          }
          return _results;
        })();
        $.post("/stories/" + this.story._id + "/parts", postData, function(response) {
          if (response.success) {
            part._id = response._id;
            delete part.isNew;
          }
          return onComplete(response);
        });
      }
      return false;
    };

    ContentPane.prototype.cancelPartEdit = function(editable) {
      var part;
      part = editable.data('part');
      if (!part.isNew) {
        editable.removeClass('selected');
        return this.renderPartContent(editable);
      } else {
        return editable.remove();
      }
    };

    ContentPane.prototype.removePart = function(editable) {
      var part,
        _this = this;
      part = editable.data('part');
      if (!part.isNew) {
        return $.delete_("/stories/" + this.story._id + "/parts/" + part._id, {}, function(response) {
          if (response.success) return editable.remove();
        });
      } else {
        return editable.remove();
      }
    };

    ContentPane.prototype.addSection = function(previous) {
      var addSection, added, content, elem,
        _this = this;
      elem = (function() {
        switch (previous) {
          case 'start':
            return $('#part-editor').children().first();
          case 'end':
            return $('#part-editor').children().last();
          default:
            return previous.next();
        }
      })();
      if (elem.hasClass('unsaved')) return;
      content = "            <li class=\"unsaved form\" style=\"padding-left: 24px;\">                <ul class=\"action-list\">                    <li><i class=\"icon-align-justify\"></i><a href=\"#\" class=\"text\">Text content</a></li>                    <li><i class=\"icon-font\"></i><a href=\"#\" class=\"heading\">Heading</a></li>                    <li><i class=\"icon-picture\"></i><a href=\"#\" class=\"image\">Image</a></li>                    <li><i class=\"icon-facetime-video\"></i><a href=\"#\" class=\"video\">Video</a></li>                </ul>                <div class=\"clear\"></div>                <p>                    <i class=\"icon-remove\"></i><a style=\"font-size: 12px\" href=\"#\" class=\"cancel\">cancel</a>                </p>            </li>";
      if (previous === 'start') {
        $('#part-editor').prepend(content);
        added = $('#part-editor').children().first();
      } else if (previous === 'end') {
        $('#part-editor').append(content);
        added = $('#part-editor').children().last();
      } else {
        $(content).insertAfter(previous);
        added = previous.next();
      }
      added.find('select').focus();
      addSection = function(partType) {
        var editable, part;
        part = {
          type: partType,
          _id: SocialTypist.Utils.uniqueId(),
          isNew: true,
          value: ''
        };
        editable = _this.createPartContainer(part, added.prev());
        added.remove();
        editable.data('part', part);
        return _this.editPart(editable);
      };
      added.find('.text').click(function() {
        addSection('TEXT');
        return false;
      });
      added.find('.heading').click(function() {
        addSection('HEADING');
        return false;
      });
      added.find('.image').click(function() {
        addSection('IMAGE');
        return false;
      });
      added.find('.video').click(function() {
        addSection('VIDEO');
        return false;
      });
      return added.find('.cancel').click(function() {
        added.remove();
        return false;
      });
    };

    ContentPane.prototype.makeHtml = function(markdown) {
      if (markdown) {
        return this.showdown.makeHtml(markdown);
      } else {
        return '';
      }
    };

    ContentPane.prototype.createForm = function(parent, html) {
      var _this = this;
      parent.html(html);
      return parent.children('form').last().submit(function() {
        return false;
      });
    };

    ContentPane.prototype.getHeadingPrefix = function(size) {
      switch (size) {
        case 'H1':
          return '#';
        case 'H2':
          return '##';
        case 'H3':
          return '###';
        case 'H4':
          return '####';
        case 'H5':
          return '#####';
        case 'H6':
          return '######';
      }
    };

    return ContentPane;

  })();

  this.SocialTypist.StoryEditView = StoryEditView;

}).call(this);
