// Generated by CoffeeScript 1.2.1-pre
(function() {
  var StoryEditView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  StoryEditView = (function() {

    StoryEditView.name = 'StoryEditView';

    function StoryEditView(story, container) {
      this.story = story;
      this.getHeadingPrefix = __bind(this.getHeadingPrefix, this);

      this.makeHtml = __bind(this.makeHtml, this);

      this.addSection = __bind(this.addSection, this);

      this.deletePart = __bind(this.deletePart, this);

      this.cancelPartEdit = __bind(this.cancelPartEdit, this);

      this.savePart = __bind(this.savePart, this);

      this.editVideoPart = __bind(this.editVideoPart, this);

      this.editImagePart = __bind(this.editImagePart, this);

      this.editTextPart = __bind(this.editTextPart, this);

      this.editHeadingPart = __bind(this.editHeadingPart, this);

      this.renderVideoPart = __bind(this.renderVideoPart, this);

      this.renderImagePart = __bind(this.renderImagePart, this);

      this.renderTextPart = __bind(this.renderTextPart, this);

      this.renderHeadingPart = __bind(this.renderHeadingPart, this);

      this.renderPartContent = __bind(this.renderPartContent, this);

      this.createPartContainer = __bind(this.createPartContainer, this);

      this.createParts = __bind(this.createParts, this);

      this.cancelTitleEdit = __bind(this.cancelTitleEdit, this);

      this.saveTitle = __bind(this.saveTitle, this);

      this.editTitle = __bind(this.editTitle, this);

      this.createTitle = __bind(this.createTitle, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);

      this.container = $(container);
      this.initialize();
    }

    StoryEditView.prototype.initialize = function() {
      return this.showdown = new Showdown.converter();
    };

    StoryEditView.prototype.render = function() {
      this.createTitle();
      return this.createParts();
    };

    StoryEditView.prototype.createTitle = function() {
      var title,
        _this = this;
      this.container.append("<div class=\"editable title\"><h1 class=\"title\">" + story.title + "</h1></div>");
      title = this.container.find('.editable.title');
      title.data('title', story.title);
      return title.click(function() {});
    };

    StoryEditView.prototype.editTitle = function() {
      var editable, val,
        _this = this;
      editable = $('#story-editor .editable.title');
      editable.unbind('click');
      editable.addClass('selected');
      val = editable.data('title');
      editable.html("            <form class=\"title-editor\">                <input type=\"text\" class=\"span6\" /><br />                <p class=\"left\"><a class=\"save btn small\" href=\"#\">Save section</a> <a class=\"cancel small action\" href=\"#\">cancel</a></p>                <hr />                <p class=\"add-section\"><span class=\"plus\">+</span><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
      editable.find('.title-editor input').val(val);
      editable.find('a.save').click(function() {
        _this.saveTitle();
        return false;
      });
      editable.find('a.cancel').click(function() {
        _this.cancelTitleEdit();
        return false;
      });
      return editable.find('.insert').click(function() {
        _this.addSection('start');
        return false;
      });
    };

    StoryEditView.prototype.saveTitle = function() {
      var editable,
        _this = this;
      editable = $('#story-editor .editable.title');
      editable.click(function() {
        return _this.editTitle();
      });
      editable.removeClass('selected');
      return editable.html("<h1 class=\"title\">" + ($('.title-editor input').val()) + "</h1>");
    };

    StoryEditView.prototype.cancelTitleEdit = function() {
      var editable,
        _this = this;
      editable = $('#story-editor .editable.title');
      editable.click(function() {
        return _this.editTitle();
      });
      editable.removeClass('selected');
      return editable.html("<h1 class=\"title\">" + (editable.data('title')) + "</h1>");
    };

    StoryEditView.prototype.createParts = function() {
      var editable, part, _i, _len, _ref, _results,
        _this = this;
      this.container.append('<ul id="part-editor" class="story"></ul>');
      this.container.append('<p class="add-section"><span class="plus">+</span><a class="small action" href="#">add new section</a></p>');
      this.container.find('.add-section a').click(function() {
        _this.addSection('end');
        return false;
      });
      this.editor = this.container.find('#part-editor').first();
      if (this.story._objects.parts.length) {
        _ref = this.story._objects.parts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          editable = this.createPartContainer(part, editable);
          editable.data('part', part);
          _results.push(this.renderPartContent(editable));
        }
        return _results;
      }
    };

    StoryEditView.prototype.createPartContainer = function(part, previousElement) {
      var editable;
      editable = this.editor.find("#storypart_" + part._id);
      if (!editable.length) {
        if (!previousElement) {
          this.editor.prepend("<li class=\"content editable\" id=\"storypart_" + part._id + "\"><br /></li>");
        } else {
          $("<li class=\"content editable\" id=\"storypart_" + part._id + "\"></li>").insertAfter(previousElement);
        }
        editable = this.editor.find("#storypart_" + part._id);
      }
      return editable;
    };

    StoryEditView.prototype.renderPartContent = function(editable) {
      var _this = this;
      editable.click(function() {
        editable.unbind('click');
        return _this.editPart(editable);
      });
      switch (editable.data('part').type) {
        case 'HEADING':
          this.renderHeadingPart(editable);
          break;
        case 'TEXT':
          this.renderTextPart(editable);
          break;
        case 'IMAGE':
          this.renderImagePart(editable);
          break;
        case 'VIDEO':
          this.renderVideoPart(editable);
      }
      return editable;
    };

    StoryEditView.prototype.renderHeadingPart = function(editable) {
      var part;
      part = editable.data('part');
      return editable.html(this.makeHtml(this.getHeadingPrefix(part.size) + part.value));
    };

    StoryEditView.prototype.renderTextPart = function(editable) {
      var part;
      part = editable.data('part');
      return editable.html(this.makeHtml(part.value));
    };

    StoryEditView.prototype.renderImagePart = function(editable) {
      var alt, part, _ref;
      part = editable.data('part');
      alt = (_ref = part.alt) != null ? _ref : '';
      return editable.html("<img src=\"" + part.value + "\" alt=\"" + alt + "\" />");
    };

    StoryEditView.prototype.renderVideoPart = function(editable) {
      var part;
      part = editable.data('part');
      return editable.html(this.makeHtml(part.value));
    };

    StoryEditView.prototype.editPart = function(editable) {
      var part,
        _this = this;
      part = editable.data('part');
      editable.addClass('selected');
      switch (part.type) {
        case 'HEADING':
          this.editHeadingPart(editable);
          break;
        case 'TEXT':
          this.editTextPart(editable);
          break;
        case 'IMAGE':
          this.editImagePart(editable);
          break;
        case 'VIDEO':
          this.editVideoPart(editable);
      }
      editable.find('.cancel').click(function() {
        _this.cancelPartEdit(editable);
        return false;
      });
      editable.find('.delete').click(function() {
        _this.deletePart(editable);
        return false;
      });
      editable.find('.insert').click(function() {
        _this.addSection(editable);
        return false;
      });
      return editable.find('textarea').focus();
    };

    StoryEditView.prototype.editHeadingPart = function(editable) {
      var part, _ref, _ref1,
        _this = this;
      part = editable.data('part');
      editable.html("            <form>                <select class=\"size span2\">                    <option>H2</option>                    <option>H3</option>                    <option>H4</option>                    <option>H5</option>                    <option>H6</option>                                    </select>                <br />                <input type=\"text\" class=\"span6\" value=\"" + ((_ref = part.value) != null ? _ref : '') + "\" />                <p class=\"left\"><a class=\"save btn small\" href=\"#\">Save section</a> <a class=\"cancel small action\" href=\"#\">cancel</a></p>                <hr />                <p class=\"add-section\"><span class=\"plus\">+</span><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
      editable.find('.size').val((_ref1 = part.size) != null ? _ref1 : 'H2');
      return editable.find('.save').click(function() {
        return _this.savePart(editable, function() {
          part.size = editable.find('select').val();
          part.value = editable.find('input').val();
          return editable.html(_this.makeHtml(_this.getHeadingPrefix(part.size) + part.value));
        });
      });
    };

    StoryEditView.prototype.editTextPart = function(editable) {
      var part, rows,
        _this = this;
      part = editable.data('part');
      if (editable.height() > 480) {
        rows = 28;
      } else if (editable.height() > 240) {
        rows = 16;
      } else {
        rows = 8;
      }
      editable.html("            <form>                <textarea rows=\"" + rows + "\">" + part.value + "</textarea>                <p class=\"left\"><a class=\"save btn small\" href=\"#\">Save section</a> <a class=\"cancel small action\" href=\"#\">cancel</a></p>                <hr />                <p class=\"add-section\"><span class=\"plus\">+</span><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
      return editable.find('.save').click(function() {
        editable.click(function() {
          return _this.editPart(editable);
        });
        part = editable.data('part');
        editable.removeClass('selected');
        part.value = editable.find('textarea').val();
        editable.html(_this.makeHtml(editable.find('textarea').val()));
        return false;
      });
    };

    StoryEditView.prototype.editImagePart = function(editable) {
      var part;
      part = editable.data('part');
      return editable.html("            <form>                <input type=\"text\" class=\"span6\" value=\"" + part.value + "\" />                <p class=\"left\"><a class=\"save btn small\" href=\"#\">Save section</a> <a class=\"cancel small action\" href=\"#\">cancel</a></p>                <hr />                <p class=\"add-section\"><span class=\"plus\">+</span><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
    };

    StoryEditView.prototype.editVideoPart = function(editable) {
      var part;
      part = editable.data('part');
      return editable.html("            <form>                <input type=\"text\" class=\"span6\" value=\"" + part.value + "\" />                <p class=\"left\"><a class=\"save btn small\" href=\"#\">Save section</a> <a class=\"cancel small action\" href=\"#\">cancel</a></p>                <hr />                <p class=\"add-section\"><span class=\"plus\">+</span><a class=\"small action insert\" href=\"#\">insert section below</a></p>            </form>");
    };

    StoryEditView.prototype.savePart = function(editable, fnEdit) {
      var part,
        _this = this;
      editable.click(function() {
        return _this.editPart(editable);
      });
      editable.removeClass('selected');
      fnEdit();
      part = editable.data('part');
      return false;
    };

    StoryEditView.prototype.cancelPartEdit = function(editable) {
      var part,
        _this = this;
      editable.click(function() {
        return _this.editPart(editable);
      });
      part = editable.data('part');
      editable.removeClass('selected');
      return editable.html(this.makeHtml(part.value));
    };

    StoryEditView.prototype.deletePart = function(editable) {
      var part,
        _this = this;
      editable.click(function() {
        return _this.editPart(editable);
      });
      part = editable.data('part');
      return editable.remove();
    };

    StoryEditView.prototype.addSection = function(previous) {
      var added, content, elem,
        _this = this;
      elem = (function() {
        switch (previous) {
          case 'start':
            return $('#part-editor').children().first();
          case 'end':
            return $('#part-editor').children().last();
          default:
            return previous.next();
        }
      })();
      if (elem.hasClass('unsaved')) return;
      content = "            <li class=\"unsaved form\">                <select class=\"part-type span2\">                    <option value=\"HEADING\">Heading</option>                    <option value=\"TEXT\" selected=\"selected\">Text</option>                    <option value=\"IMAGE\">Image</option>                    <option value=\"VIDEO\">Video</option>                </select>                <p>                    <a href=\"#\" class=\"btn add\">Add</a>                    <a href=\"#\" class=\"small action cancel\">cancel</a>                </p>            </li>        ";
      if (previous === 'start') {
        $('#part-editor').prepend(content);
        added = $('#part-editor').children().first();
      } else if (previous === 'end') {
        $('#part-editor').append(content);
        added = $('#part-editor').children().last();
      } else {
        $(content).insertAfter(previous);
        added = previous.next();
      }
      added.find('.add').click(function() {
        var editable, part;
        part = {
          type: added.find('.part-type').val(),
          _id: SocialTypist.Utils.uniqueId()
        };
        editable = _this.createPartContainer(part, added.prev());
        added.remove();
        editable.data('part', part);
        _this.editPart(editable);
        return false;
      });
      return added.find('.cancel').click(function() {
        added.remove();
        return false;
      });
    };

    StoryEditView.prototype.makeHtml = function(markdown) {
      if (markdown) {
        return this.showdown.makeHtml(markdown);
      } else {
        return '';
      }
    };

    StoryEditView.prototype.getHeadingPrefix = function(size) {
      switch (size) {
        case 'H1':
          return '#';
        case 'H2':
          return '##';
        case 'H3':
          return '###';
        case 'H4':
          return '####';
        case 'H5':
          return '#####';
        case 'H6':
          return '######';
      }
    };

    return StoryEditView;

  })();

  this.SocialTypist.StoryEditView = StoryEditView;

}).call(this);
