// Generated by CoffeeScript 1.2.1-pre
(function() {
  var AdminController, conf, controller, database, dbconf, models,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  controller = require('./controller');

  dbconf = require('../../models/dbconf');

  database = new (require('../../common/database')).Database(dbconf["default"]);

  models = new (require('../../models')).Models(dbconf["default"]);

  conf = require('../conf');

  AdminController = (function(_super) {

    __extends(AdminController, _super);

    AdminController.name = 'AdminController';

    function AdminController() {
      this.reloadSettings = __bind(this.reloadSettings, this);

      this.removeFeatured = __bind(this.removeFeatured, this);

      this.addFeatured = __bind(this.addFeatured, this);

      this.featured = __bind(this.featured, this);

      this.logout = __bind(this.logout, this);

      this.index = __bind(this.index, this);

    }

    AdminController.prototype.index = function(req, res, next) {
      var item, items, _i, _len, _ref;
      if (req.query.adminKey !== conf.adminKey) {
        return res.send({
          success: false,
          message: 'BAD_KEY'
        });
      } else {
        req.session.admin = true;
        items = [];
        _ref = global.cachingWhale.items.sitesettings;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          items.push(JSON.stringify(item).substring(0, 250));
        }
        return res.render('admin/index.hbs', {
          layout: false,
          items: items
        });
      }
    };

    AdminController.prototype.logout = function(req, res, next) {
      req.session.destroy();
      return res.send('Logged out.');
    };

    AdminController.prototype.featured = function(req, res, next) {
      var _this = this;
      if (req.session.admin) {
        return database.find('sitesettings', {}, function(err, cursor) {
          return cursor.toArray(function(err, items) {
            return res.render('admin/featured.hbs', {
              items: items,
              layout: false
            });
          });
        });
      } else {
        return res.send('No session.');
      }
    };

    AdminController.prototype.addFeatured = function(req, res, next) {
      var fn,
        _this = this;
      if (req.session.admin) {
        fn = function() {
          return models.Story.getById(req.body.storyid, function(err, story) {
            var entry;
            entry = {
              type: 'FEATURED',
              storyid: story._id.toString(),
              title: story.title,
              content: story.cache.html
            };
            return database.insert('sitesettings', entry, function() {
              return res.redirect('/admin/featured');
            });
          });
        };
        return database.findOne('sitesettings', {
          type: 'FEATURED',
          storyid: req.body.storyid
        }, function(err, item) {
          if (item != null) {
            return database.removeById('sitesettings', item._id, function() {
              return fn();
            });
          } else {
            return fn();
          }
        });
      } else {
        return res.send('No session.');
      }
    };

    AdminController.prototype.removeFeatured = function(req, res, next) {
      var _this = this;
      if (req.session.admin) {
        return database.removeById('sitesettings', req.params.id, function() {
          return res.redirect('/admin/featured');
        });
      } else {
        return res.send('No session.');
      }
    };

    AdminController.prototype.reloadSettings = function(req, res, next) {
      var _this = this;
      if (req.session.admin) {
        return database.find('sitesettings', {}, function(err, cursor) {
          return cursor.toArray(function(err, items) {
            global.cachingWhale.add('sitesettings', items);
            return res.send('Reloaded settings.');
          });
        });
      } else {
        return res.send('No session.');
      }
    };

    return AdminController;

  })(controller.Controller);

  exports.AdminController = AdminController;

}).call(this);
