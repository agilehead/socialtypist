// Generated by CoffeeScript 1.2.1-pre
(function() {
  var StoriesController, controller, dbconf, everyauth, fs, models,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  controller = require('./controller');

  everyauth = require('everyauth');

  dbconf = require('../../models/dbconf');

  models = new (require('../../models')).Models(dbconf["default"]);

  fs = require('fs');

  StoriesController = (function(_super) {

    __extends(StoriesController, _super);

    StoriesController.name = 'StoriesController';

    function StoriesController() {
      this.getPartFromBody = __bind(this.getPartFromBody, this);

      this.upload = __bind(this.upload, this);

      this.publish = __bind(this.publish, this);

      this.deletePart = __bind(this.deletePart, this);

      this.updatePart = __bind(this.updatePart, this);

      this.createPart = __bind(this.createPart, this);

      this.createMessage = __bind(this.createMessage, this);

      this.update = __bind(this.update, this);

      this.editForm = __bind(this.editForm, this);

      this.create = __bind(this.create, this);

      this.createForm = __bind(this.createForm, this);

      this.yours = __bind(this.yours, this);

      this.show = __bind(this.show, this);

      this.index = __bind(this.index, this);

      var fn, _i, _len, _ref;
      _ref = ['yours', 'createForm', 'create', 'editForm', 'update', 'createPart', 'updatePart', 'deletePart', 'publish', 'upload'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fn = _ref[_i];
        this[fn] = this.ensureSession(this[fn]);
      }
    }

    StoriesController.prototype.index = function(req, res, next) {
      return res.render('stories/index.hbs', {
        loginStatus: this.getLoginStatus(req)
      });
    };

    StoriesController.prototype.show = function(req, res, next) {
      var _this = this;
      return models.Story.getById(req.params.storyid, function(err, story) {
        var author, authors, isAuthor, loginStatus, owner, owners;
        if (story) {
          loginStatus = _this.getLoginStatus(req);
          if (loginStatus.loggedIn) {
            owners = (function() {
              var _i, _len, _ref, _results;
              _ref = story.owners;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                owner = _ref[_i];
                if (owner === this.getUserId()) _results.push(owner);
              }
              return _results;
            }).call(_this);
            authors = (function() {
              var _i, _len, _ref, _results;
              _ref = story.authors;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                author = _ref[_i];
                if (author === this.getUserId()) _results.push(author);
              }
              return _results;
            }).call(_this);
            isAuthor = owners.length > 0 || authors.length > 0;
          } else {
            isAuthor = false;
          }
          return res.render('stories/show.hbs', {
            loginStatus: loginStatus,
            story: story,
            isAuthor: isAuthor
          });
        } else {
          return res.render('Story does not exist.');
        }
      });
    };

    StoriesController.prototype.yours = function(req, res, next) {
      var _this = this;
      return models.Story.getByUserId(this.getUserId, function(err, stories) {
        return res.render('stories/yours.hbs', {
          loginStatus: _this.getLoginStatus(req),
          stories: stories
        });
      });
    };

    StoriesController.prototype.createForm = function(req, res, next) {
      return res.render('stories/create.hbs', {
        loginStatus: this.getLoginStatus(req)
      });
    };

    StoriesController.prototype.create = function(req, res, next) {
      var story,
        _this = this;
      story = new models.Story();
      story.title = req.body.title;
      story.tags = req.body.tags;
      return story.save(this.getUserId(), function() {
        return res.redirect("/stories/" + story._id + "/edit");
      });
    };

    StoriesController.prototype.editForm = function(req, res, next) {
      var _this = this;
      return models.Story.getById(req.params.storyid, function(err, story) {
        return story.getParts(function(err, parts) {
          story._objects = {
            parts: parts
          };
          return res.render('stories/edit.hbs', {
            loginStatus: _this.getLoginStatus(req),
            story: JSON.stringify(story)
          });
        });
      });
    };

    StoriesController.prototype.update = function(req, res, next) {
      var _this = this;
      return models.Story.getById(req.params.storyid, function(err, story) {
        story.title = req.body.title;
        return story.save(_this.getUserId, function() {
          res.contentType('json');
          return res.send({
            success: true
          });
        });
      });
    };

    StoriesController.prototype.createMessage = function(req, res, next) {
      var message,
        _this = this;
      message = new models.Message();
      message.contents = req.body.message;
      message.story = req.params.storyid;
      message.type = req.body.type;
      message.from = this.getUserId();
      message.timestamp = new Date().getTime();
      return message.save(function() {
        res.contentType('json');
        return res.send({
          success: true
        });
      });
    };

    StoriesController.prototype.createPart = function(req, res, next) {
      var _this = this;
      return models.Story.getById(req.params.storyid, function(err, story) {
        var part;
        part = _this.getPartFromBody(req.body);
        return story.createPart(part, req.body.previousParts, _this.getUserId(), function() {
          res.contentType('json');
          return res.send({
            success: true,
            _id: part._id
          });
        });
      });
    };

    StoriesController.prototype.updatePart = function(req, res, next) {
      var _this = this;
      return models.Story.getById(req.params.storyid, function(err, story) {
        return story.updatePart(_this.getPartFromBody(req.body), _this.getUserId(), function() {
          res.contentType('json');
          return res.send({
            success: true
          });
        });
      });
    };

    StoriesController.prototype.deletePart = function(req, res, next) {
      var _this = this;
      return models.Story.getById(req.params.storyid, function(err, story) {
        return story.deletePart(req.params.partid, _this.getUserId(), function() {
          res.contentType('json');
          return res.send({
            success: true
          });
        });
      });
    };

    StoriesController.prototype.publish = function(req, res, next) {
      var _this = this;
      return models.Story.getById(req.params.storyid, function(err, story) {
        return story.publish(_this.getUserId(), function() {
          res.contentType('json');
          return res.send({
            success: true
          });
        });
      });
    };

    StoriesController.prototype.upload = function(req, res, next) {
      var targetPath,
        _this = this;
      if (req.files) {
        targetPath = "./public/images/content/" + req.params.storyid + "_" + req.files.file.name;
        return fs.rename(req.files.file.path, targetPath, function(err) {
          return res.send("/public/images/content/" + req.params.storyid + "_" + req.files.file.name);
        });
      }
    };

    StoriesController.prototype.getPartFromBody = function(body) {
      var part;
      return part = new models.StoryPart(body);
    };

    return StoriesController;

  })(controller.Controller);

  exports.StoriesController = StoriesController;

}).call(this);
