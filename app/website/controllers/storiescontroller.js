// Generated by CoffeeScript 1.3.1
(function() {
  var StoriesController, controller, dateformatter, dbconf, fs, models,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  dateformatter = require('../../common/dateformatter');

  controller = require('./controller');

  dbconf = require('../../models/dbconf');

  models = new (require('../../models')).Models(dbconf["default"]);

  fs = require('fs');

  StoriesController = (function(_super) {

    __extends(StoriesController, _super);

    StoriesController.name = 'StoriesController';

    function StoriesController() {
      this.getPartFromBody = __bind(this.getPartFromBody, this);

      this.upload = __bind(this.upload, this);

      this.publish = __bind(this.publish, this);

      this.deletePart = __bind(this.deletePart, this);

      this.updatePart = __bind(this.updatePart, this);

      this.createPart = __bind(this.createPart, this);

      this.history = __bind(this.history, this);

      this.fork = __bind(this.fork, this);

      this.createMessage = __bind(this.createMessage, this);

      this.removeAuthor = __bind(this.removeAuthor, this);

      this.addAuthor = __bind(this.addAuthor, this);

      this.authorRequest = __bind(this.authorRequest, this);

      this.deleteMessage = __bind(this.deleteMessage, this);

      this.messages = __bind(this.messages, this);

      this.update = __bind(this.update, this);

      this.editForm = __bind(this.editForm, this);

      this.create = __bind(this.create, this);

      this.createForm = __bind(this.createForm, this);

      this.yours = __bind(this.yours, this);

      this.show = __bind(this.show, this);

      var fn, _i, _len, _ref;
      _ref = ['yours', 'createForm', 'create', 'editForm', 'update', 'createPart', 'updatePart', 'deletePart', 'publish', 'upload'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fn = _ref[_i];
        this[fn] = this.ensureSession(this[fn]);
      }
    }

    StoriesController.prototype.show = function(req, res, next) {
      var _this = this;
      return models.Story.getById(req.params.storyid, function(err, story) {
        var author, authors, isAuthor, loginStatus, owner, owners;
        if (story) {
          loginStatus = _this.getLoginStatus(req);
          if (loginStatus.loggedIn) {
            owners = (function() {
              var _i, _len, _ref, _results;
              _ref = story.owners;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                owner = _ref[_i];
                if (owner === this.getUserId(req)) {
                  _results.push(owner);
                }
              }
              return _results;
            }).call(_this);
            authors = (function() {
              var _i, _len, _ref, _results;
              _ref = story.authors;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                author = _ref[_i];
                if (author === this.getUserId(req)) {
                  _results.push(author);
                }
              }
              return _results;
            }).call(_this);
            isAuthor = owners.length > 0 || authors.length > 0;
          } else {
            isAuthor = false;
          }
          return res.render('stories/show.hbs', {
            loginStatus: loginStatus,
            story: story,
            isAuthor: isAuthor
          });
        } else {
          return res.send('Story does not exist.');
        }
      });
    };

    StoriesController.prototype.yours = function(req, res, next) {
      var _this = this;
      return models.Story.getByUserId(this.getUserId(req), function(err, stories) {
        var a, authors, story, _i, _len;
        for (_i = 0, _len = stories.length; _i < _len; _i++) {
          story = stories[_i];
          story.shortSummary = story.summary;
          story.created = dateformatter.format(story.timestamp);
          story.ownerdomainid = story.cache.owners[0].domainid;
          story.ownername = story.cache.owners[0].name;
          if (story.cache.authors.length) {
            if (story.cache.authors.length < 5) {
              authors = ((function() {
                var _j, _len1, _ref, _results;
                _ref = story.cache.authors;
                _results = [];
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  a = _ref[_j];
                  _results.push("<a href=\"/authors/" + a._id + "/stories\">" + a.name + "</a>");
                }
                return _results;
              })()).join(', ');
              story.others = "with " + authors + ".";
            } else {
              story.others = "with " + story.cache.authors.length + " others.";
            }
          } else {
            story.others = '';
          }
        }
        return res.render('stories/yours.hbs', {
          loginStatus: _this.getLoginStatus(req),
          stories: stories
        });
      });
    };

    StoriesController.prototype.createForm = function(req, res, next) {
      return res.render('stories/create.hbs', {
        loginStatus: this.getLoginStatus(req)
      });
    };

    StoriesController.prototype.create = function(req, res, next) {
      var story,
        _this = this;
      story = new models.Story();
      story.title = this.getValue(req.body, 'title');
      story.summary = this.getValue(req.body, 'summary');
      story.tags = this.getValue(req.body, 'tags');
      return story.save(this.getUserId(req), function() {
        var change;
        change = new models.Change();
        change.story = story._oid();
        change.user = _this.getUser(req);
        change.type = "NEW_STORY";
        return change.save(function() {
          return res.redirect("/stories/" + story._id + "/edit");
        });
      });
    };

    StoriesController.prototype.editForm = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.getParts(function(err, parts) {
          story._objects = {
            parts: parts
          };
          return res.render('stories/edit.hbs', {
            loginStatus: _this.getLoginStatus(req),
            story: JSON.stringify(story)
          });
        });
      });
    };

    StoriesController.prototype.update = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        var oldStory;
        oldStory = story;
        _this.setValues(story, req.body, ['title', 'tags', 'slug', 'summary']);
        return story.save(_this.getUserId(req), function() {
          var change;
          change = new models.Change();
          change.story = story._oid();
          change.user = _this.getUser(req);
          change.type = "UPDATE_STORY";
          change.oldValue = oldStory;
          change.newValue = story;
          return change.save(function() {
            res.contentType('json');
            return res.send({
              success: true
            });
          });
        });
      });
    };

    StoriesController.prototype.messages = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.getMessages(_this.getUserId(req), function(err, messages) {
          res.contentType('json');
          return res.send({
            success: true,
            messages: messages
          });
        });
      });
    };

    StoriesController.prototype.deleteMessage = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.deleteMessage(req.params.messageid, _this.getUserId(req), function(err, x) {
          res.contentType('json');
          return res.send({
            success: true
          });
        });
      });
    };

    StoriesController.prototype.authorRequest = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.addMessage('AUTHOR_ACCESS_REQUEST', req.body.message, _this.getUserId(req), false, function() {
          res.contentType('json');
          return res.send({
            success: true
          });
        });
      });
    };

    StoriesController.prototype.addAuthor = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.addAuthor(_this.getValue(req.body, 'author'), _this.getUserId(req), function() {
          var change;
          change = new models.Change();
          change.story = story._oid();
          change.user = _this.getUser(req);
          change.type = "ADD_AUTHOR";
          change.author = _this.getValue(req.body, 'author');
          return change.save(function() {
            res.contentType('json');
            return res.send({
              success: true
            });
          });
        });
      });
    };

    StoriesController.prototype.removeAuthor = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.removeAuthor(_this.getValue(req.params, 'author'), _this.getUserId(req), function() {
          var change;
          change = new models.Change();
          change.story = story._oid();
          change.user = _this.getUser(req);
          change.type = "REMOVE_AUTHOR";
          change.author = _this.getValue(req.body, 'author');
          return change.save(function() {
            res.contentType('json');
            return res.send({
              success: true
            });
          });
        });
      });
    };

    StoriesController.prototype.createMessage = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.addMessage('MESSAGE', req.body.message, _this.getUserId(req), true, function() {
          res.contentType('json');
          return res.send({
            success: true
          });
        });
      });
    };

    StoriesController.prototype.fork = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.fork(_this.getUserId(req), function(err, forked) {
          res.contentType('json');
          return res.send({
            success: true,
            forkedStory: forked._id
          });
        });
      });
    };

    StoriesController.prototype.history = function(req, res, next) {
      var _this = this;
      return models.Change.getAll({
        story: this.getValue(req.params, 'storyid')
      }, function(err, changes) {
        res.contentType('json');
        return res.send({
          success: true,
          changes: changes
        });
      });
    };

    StoriesController.prototype.createPart = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        var part;
        part = _this.getPartFromBody(req.body);
        return story.createPart(part, req.body.previousParts, _this.getUserId(req), function() {
          var change;
          change = new models.Change();
          change.story = story._oid();
          change.type = "CREATE_PART";
          change.user = _this.getUser(req);
          change.part = part;
          return change.save(function() {
            res.contentType('json');
            return res.send({
              success: true,
              _id: part._id
            });
          });
        });
      });
    };

    StoriesController.prototype.updatePart = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.getPart(_this.getValue(req.params, 'partid'), function(err, part) {
          var newValue, oldValue;
          oldValue = part;
          newValue = _this.getPartFromBody(req.body);
          newValue._id = part._id;
          return story.updatePart(newValue, _this.getUserId(req), function() {
            var change;
            change = new models.Change();
            change.story = story._oid();
            change.type = "UPDATE_PART";
            change.user = _this.getUser(req);
            change.oldValue = oldValue;
            change.newValue = newValue;
            return change.save(function() {
              res.contentType('json');
              return res.send({
                success: true
              });
            });
          });
        });
      });
    };

    StoriesController.prototype.deletePart = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.getPart(_this.getValue(req.params, 'partid'), function(err, part) {
          return story.deletePart(_this.getValue(req.params, 'partid'), _this.getUserId(req), function() {
            var change;
            change = new models.Change();
            change.story = story._oid();
            change.type = "DELETE_PART";
            change.user = _this.getUser(req);
            change.part = part;
            return change.save(function() {
              res.contentType('json');
              return res.send({
                success: true
              });
            });
          });
        });
      });
    };

    StoriesController.prototype.publish = function(req, res, next) {
      var _this = this;
      return models.Story.getById(this.getValue(req.params, 'storyid'), function(err, story) {
        return story.publish(_this.getUserId(req), function() {
          var change;
          change = new models.Change();
          change.story = story._oid();
          change.type = "PUBLISH_STORY";
          change.user = _this.getUser(req);
          return change.save(function() {
            res.contentType('json');
            return res.send({
              success: true
            });
          });
        });
      });
    };

    StoriesController.prototype.upload = function(req, res, next) {
      var targetPath,
        _this = this;
      if (req.files) {
        targetPath = "./public/images/content/" + (this.getValue(req.params, 'storyid')) + "_" + req.files.file.name;
        return fs.rename(req.files.file.path, targetPath, function(err) {
          return res.send("/public/images/content/" + (_this.getValue(req.params, 'storyid')) + "_" + req.files.file.name);
        });
      }
    };

    StoriesController.prototype.getPartFromBody = function(body) {
      var part;
      part = new models.StoryPart();
      part.type = body.type;
      part.value = this.getValue(body, 'value');
      if (body.type === 'HEADING') {
        part.size = this.getValue(body, 'size');
      }
      if (body.type === "VIDEO") {
        part.source = this.getValue(body, 'source');
      }
      return part;
    };

    return StoriesController;

  })(controller.Controller);

  exports.StoriesController = StoriesController;

}).call(this);
